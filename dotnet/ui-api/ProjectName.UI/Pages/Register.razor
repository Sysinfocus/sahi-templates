@page "/Register"
@inject AuthenticationStateProvider asp
@inject ApiService ApiService

<PageTitle>Register - ProjectName</PageTitle>

<style>
    .register {        
        max-width: 350px;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1.5rem;
        border-radius: 1rem;        
        box-shadow: 0 0 4px 4px #0001;
        background-color:var(--primary-bg);
        position:relative;
        overflow:hidden;
    }
    .logo {
        position: absolute;
        right:1rem;
        top: 1rem;
    }    
</style>

<div class="safe-height" style="display:grid;place-items:center;margin-top:-2rem">
    <div class="register">
        <img width="80" height="80" class="logo" src="192x192.png" alt="ProjectName" />
        <div class="flex-col g4 mb1">
            <h3>Register Account</h3>
            <p class="muted">Enter your valid credentials.</p>
        </div>
        <div class="flex-col w100">
            <CascadingValue Value="@errors" IsFixed>

                <Input Label="Username" Class="mandatory" Focus @bind-Value="@model.Username"
                    Error="@(nameof(model.Username))" />

                <Input Label="Password" Type="password" Class="mandatory" @bind-Value="@model.Password"
                    Error="@(nameof(model.Password))"/>

                <Input Label="Confirm Password" Type="password" Class="mandatory" @bind-Value="@model.ConfirmPassword"
                       Error="@(nameof(model.ConfirmPassword))" />

            </CascadingValue>
        </div>
        <p class="error">@errorMessage</p>
        <div class="flex g8 mtb1">
            <Button Text="Register" OnClick="HandleRegister" />
        </div>
        <p>Already have an account? <a href=".">Login here</a></p>        
    </div>
</div>

@code
{
    private RegisterRequestDto model = new();
    private Dictionary<string, string>? errors;
    private string? errorMessage;

    private async Task HandleRegister()
    {
        errorMessage = null;

        errors = model.Errors();
        if (!model.IsValid) return;

        await browserExtensions.RemoveFromLocalStorage("user");
        var response = await ApiService.Post<RegisterRequestDto, string>("/api/v1/Auth/register", model);
        if (response.IsSuccess)
        {            
            browserExtensions.Goto("Login");
        }
        else
        {
            errorMessage = response.StatusCode switch
            {
                System.Net.HttpStatusCode.Forbidden => "Your account may be locked. Check with admin.",
                _ => "Bad request for registration.",
            };
        }
    }
}